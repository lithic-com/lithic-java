// File generated from our OpenAPI spec by Stainless.

package com.lithic.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.lithic.api.core.JsonValue
import com.lithic.api.core.jsonMapper
import com.lithic.api.errors.LithicInvalidDataException
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.EnumSource

internal class AccountActivityRetrieveTransactionResponseTest {

    @Test
    fun ofFinancialTransaction() {
        val financialTransaction =
            AccountActivityRetrieveTransactionResponse.FinancialTransaction.builder()
                .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .category(
                    AccountActivityRetrieveTransactionResponse.FinancialTransaction
                        .TransactionCategory
                        .ACH
                )
                .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency("USD")
                .descriptor("descriptor")
                .addEvent(JsonValue.from(mapOf<String, Any>()))
                .family(
                    AccountActivityRetrieveTransactionResponse.FinancialTransaction
                        .TransactionFamilyTypes
                        .CARD
                )
                .financialAccountToken("0cc87075-57cf-4607-8722-f42e2cb2c0cd")
                .pendingAmount(500L)
                .result(
                    AccountActivityRetrieveTransactionResponse.FinancialTransaction
                        .TransactionResult
                        .APPROVED
                )
                .settledAmount(200L)
                .status(
                    AccountActivityRetrieveTransactionResponse.FinancialTransaction
                        .TransactionStatus
                        .PENDING
                )
                .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .build()

        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofFinancialTransaction(financialTransaction)

        assertThat(accountActivityRetrieveTransactionResponse.financialTransaction())
            .contains(financialTransaction)
        assertThat(accountActivityRetrieveTransactionResponse.bookTransferTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.cardTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.paymentTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.externalPayment()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.managementOperationTransaction())
            .isEmpty
    }

    @Test
    fun ofFinancialTransactionRoundtrip() {
        val jsonMapper = jsonMapper()
        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofFinancialTransaction(
                AccountActivityRetrieveTransactionResponse.FinancialTransaction.builder()
                    .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .category(
                        AccountActivityRetrieveTransactionResponse.FinancialTransaction
                            .TransactionCategory
                            .ACH
                    )
                    .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currency("USD")
                    .descriptor("descriptor")
                    .addEvent(JsonValue.from(mapOf<String, Any>()))
                    .family(
                        AccountActivityRetrieveTransactionResponse.FinancialTransaction
                            .TransactionFamilyTypes
                            .CARD
                    )
                    .financialAccountToken("0cc87075-57cf-4607-8722-f42e2cb2c0cd")
                    .pendingAmount(500L)
                    .result(
                        AccountActivityRetrieveTransactionResponse.FinancialTransaction
                            .TransactionResult
                            .APPROVED
                    )
                    .settledAmount(200L)
                    .status(
                        AccountActivityRetrieveTransactionResponse.FinancialTransaction
                            .TransactionStatus
                            .PENDING
                    )
                    .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )

        val roundtrippedAccountActivityRetrieveTransactionResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(accountActivityRetrieveTransactionResponse),
                jacksonTypeRef<AccountActivityRetrieveTransactionResponse>(),
            )

        assertThat(roundtrippedAccountActivityRetrieveTransactionResponse)
            .isEqualTo(accountActivityRetrieveTransactionResponse)
    }

    @Test
    fun ofBookTransferTransaction() {
        val bookTransferTransaction =
            AccountActivityRetrieveTransactionResponse.BookTransferTransaction.builder()
                .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .category(
                    AccountActivityRetrieveTransactionResponse.BookTransferTransaction
                        .TransactionCategory
                        .ACH
                )
                .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency("USD")
                .addEvent(JsonValue.from(mapOf<String, Any>()))
                .family(
                    AccountActivityRetrieveTransactionResponse.BookTransferTransaction
                        .TransactionFamilyTypes
                        .CARD
                )
                .fromFinancialAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .pendingAmount(1000L)
                .result(
                    AccountActivityRetrieveTransactionResponse.BookTransferTransaction
                        .TransactionResult
                        .APPROVED
                )
                .settledAmount(500L)
                .status(
                    AccountActivityRetrieveTransactionResponse.BookTransferTransaction
                        .TransactionStatus
                        .PENDING
                )
                .toFinancialAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .externalId("external_id")
                .externalResource(
                    ExternalResource.builder()
                        .externalResourceToken("external_resource_token")
                        .externalResourceType(ExternalResourceType.STATEMENT)
                        .externalResourceSubToken("external_resource_sub_token")
                        .build()
                )
                .transactionSeries(
                    AccountActivityRetrieveTransactionResponse.BookTransferTransaction
                        .TransactionSeries
                        .builder()
                        .relatedTransactionEventToken("123e4567-e89b-12d3-a456-426614174000")
                        .relatedTransactionToken("123e4567-e89b-12d3-a456-426614174000")
                        .type("FEE")
                        .build()
                )
                .build()

        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofBookTransferTransaction(
                bookTransferTransaction
            )

        assertThat(accountActivityRetrieveTransactionResponse.financialTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.bookTransferTransaction())
            .contains(bookTransferTransaction)
        assertThat(accountActivityRetrieveTransactionResponse.cardTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.paymentTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.externalPayment()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.managementOperationTransaction())
            .isEmpty
    }

    @Test
    fun ofBookTransferTransactionRoundtrip() {
        val jsonMapper = jsonMapper()
        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofBookTransferTransaction(
                AccountActivityRetrieveTransactionResponse.BookTransferTransaction.builder()
                    .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .category(
                        AccountActivityRetrieveTransactionResponse.BookTransferTransaction
                            .TransactionCategory
                            .ACH
                    )
                    .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currency("USD")
                    .addEvent(JsonValue.from(mapOf<String, Any>()))
                    .family(
                        AccountActivityRetrieveTransactionResponse.BookTransferTransaction
                            .TransactionFamilyTypes
                            .CARD
                    )
                    .fromFinancialAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .pendingAmount(1000L)
                    .result(
                        AccountActivityRetrieveTransactionResponse.BookTransferTransaction
                            .TransactionResult
                            .APPROVED
                    )
                    .settledAmount(500L)
                    .status(
                        AccountActivityRetrieveTransactionResponse.BookTransferTransaction
                            .TransactionStatus
                            .PENDING
                    )
                    .toFinancialAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .externalId("external_id")
                    .externalResource(
                        ExternalResource.builder()
                            .externalResourceToken("external_resource_token")
                            .externalResourceType(ExternalResourceType.STATEMENT)
                            .externalResourceSubToken("external_resource_sub_token")
                            .build()
                    )
                    .transactionSeries(
                        AccountActivityRetrieveTransactionResponse.BookTransferTransaction
                            .TransactionSeries
                            .builder()
                            .relatedTransactionEventToken("123e4567-e89b-12d3-a456-426614174000")
                            .relatedTransactionToken("123e4567-e89b-12d3-a456-426614174000")
                            .type("FEE")
                            .build()
                    )
                    .build()
            )

        val roundtrippedAccountActivityRetrieveTransactionResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(accountActivityRetrieveTransactionResponse),
                jacksonTypeRef<AccountActivityRetrieveTransactionResponse>(),
            )

        assertThat(roundtrippedAccountActivityRetrieveTransactionResponse)
            .isEqualTo(accountActivityRetrieveTransactionResponse)
    }

    @Test
    fun ofCardTransaction() {
        val cardTransaction =
            AccountActivityRetrieveTransactionResponse.CardTransaction.builder()
                .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .accountToken("bd5e5649-1be8-4117-9bc5-3268258d1417")
                .acquirerFee(0L)
                .acquirerReferenceNumber("12345678987654321234567")
                .amount(1000L)
                .amounts(
                    Transaction.TransactionAmounts.builder()
                        .cardholder(
                            Transaction.TransactionAmounts.Cardholder.builder()
                                .amount(-1000L)
                                .conversionRate("1.000000")
                                .currency("USD")
                                .build()
                        )
                        .hold(
                            Transaction.TransactionAmounts.Hold.builder()
                                .amount(0L)
                                .currency("USD")
                                .build()
                        )
                        .merchant(
                            Transaction.TransactionAmounts.Merchant.builder()
                                .amount(-1000L)
                                .currency("USD")
                                .build()
                        )
                        .settlement(
                            Transaction.TransactionAmounts.Settlement.builder()
                                .amount(-1000L)
                                .currency("USD")
                                .build()
                        )
                        .build()
                )
                .authorizationAmount(1000L)
                .authorizationCode("123456")
                .avs(Transaction.Avs.builder().address("address").zipcode("zipcode").build())
                .cardToken("19c22c47-7a75-43ee-9891-595419830f7e")
                .cardholderAuthentication(
                    Transaction.CardholderAuthentication.builder()
                        .threeDSVersion("2")
                        .acquirerExemption(
                            Transaction.CardholderAuthentication.AcquirerExemption.NONE
                        )
                        .authenticationResult(
                            Transaction.CardholderAuthentication.AuthenticationResult.SUCCESS
                        )
                        .decisionMadeBy(
                            Transaction.CardholderAuthentication.DecisionMadeBy.LITHIC_RULES
                        )
                        .liabilityShift(
                            Transaction.CardholderAuthentication.LiabilityShift._3DS_AUTHENTICATED
                        )
                        .threeDSAuthenticationToken("a6e372d0-b40a-43eb-b0d1-4e1aebef5875")
                        .verificationAttempted(
                            Transaction.CardholderAuthentication.VerificationAttempted.NONE
                        )
                        .verificationResult(
                            Transaction.CardholderAuthentication.VerificationResult.FRICTIONLESS
                        )
                        .authenticationMethod(
                            Transaction.CardholderAuthentication.AuthenticationMethod.FRICTIONLESS
                        )
                        .build()
                )
                .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .merchant(
                    Transaction.Merchant.builder()
                        .acceptorId("333301802529120")
                        .acquiringInstitutionId("191231")
                        .city("NEW YORK")
                        .country("USA")
                        .descriptor("COFFEE SHOP")
                        .mcc("5812")
                        .state("NY")
                        .build()
                )
                .merchantAmount(1000L)
                .merchantAuthorizationAmount(1000L)
                .merchantCurrency("USD")
                .network(Transaction.Network.MASTERCARD)
                .networkRiskScore(0L)
                .pos(
                    Transaction.Pos.builder()
                        .entryMode(
                            Transaction.Pos.PosEntryMode.builder()
                                .card(Transaction.Pos.PosEntryMode.Card.NOT_PRESENT)
                                .cardholder(
                                    Transaction.Pos.PosEntryMode.Cardholder.DEFERRED_BILLING
                                )
                                .pan(Transaction.Pos.PosEntryMode.Pan.AUTO_ENTRY)
                                .pinEntered(true)
                                .build()
                        )
                        .terminal(
                            Transaction.Pos.PosTerminal.builder()
                                .attended(true)
                                .cardRetentionCapable(true)
                                .onPremise(true)
                                .operator(Transaction.Pos.PosTerminal.Operator.ADMINISTRATIVE)
                                .partialApprovalCapable(true)
                                .pinCapability(Transaction.Pos.PosTerminal.PinCapability.CAPABLE)
                                .type(Transaction.Pos.PosTerminal.Type.ADMINISTRATIVE)
                                .acceptorTerminalId("acceptor_terminal_id")
                                .build()
                        )
                        .build()
                )
                .result(Transaction.DeclineResult.APPROVED)
                .settledAmount(1000L)
                .status(Transaction.Status.PENDING)
                .tokenInfo(
                    Transaction.TokenInfo.builder()
                        .walletType(Transaction.TokenInfo.WalletType.APPLE_PAY)
                        .build()
                )
                .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .addEvent(
                    Transaction.TransactionEvent.builder()
                        .token("0c2adae9-f535-4505-8c35-421dad9bd0b6")
                        .amount(1000L)
                        .amounts(
                            Transaction.TransactionEvent.TransactionEventAmounts.builder()
                                .cardholder(
                                    Transaction.TransactionEvent.TransactionEventAmounts.Cardholder
                                        .builder()
                                        .amount(1000L)
                                        .conversionRate("1.000000")
                                        .currency("USD")
                                        .build()
                                )
                                .merchant(
                                    Transaction.TransactionEvent.TransactionEventAmounts.Merchant
                                        .builder()
                                        .amount(1000L)
                                        .currency("USD")
                                        .build()
                                )
                                .settlement(
                                    Transaction.TransactionEvent.TransactionEventAmounts.Settlement
                                        .builder()
                                        .amount(1000L)
                                        .conversionRate("1.000000")
                                        .currency("USD")
                                        .build()
                                )
                                .build()
                        )
                        .created(OffsetDateTime.parse("2023-09-26T21:14:28.637Z"))
                        .addDetailedResult(Transaction.TransactionEvent.DetailedResult.APPROVED)
                        .effectivePolarity(Transaction.TransactionEvent.EffectivePolarity.DEBIT)
                        .networkInfo(
                            Transaction.TransactionEvent.NetworkInfo.builder()
                                .acquirer(
                                    Transaction.TransactionEvent.NetworkInfo.Acquirer.builder()
                                        .acquirerReferenceNumber("acquirer_reference_number")
                                        .retrievalReferenceNumber("retrieval_reference_number")
                                        .build()
                                )
                                .amex(
                                    Transaction.TransactionEvent.NetworkInfo.Amex.builder()
                                        .originalTransactionId("original_transaction_id")
                                        .transactionId("transaction_id")
                                        .build()
                                )
                                .mastercard(
                                    Transaction.TransactionEvent.NetworkInfo.Mastercard.builder()
                                        .banknetReferenceNumber("banknet_reference_number")
                                        .originalBanknetReferenceNumber(
                                            "original_banknet_reference_number"
                                        )
                                        .originalSwitchSerialNumber("original_switch_serial_number")
                                        .switchSerialNumber("switch_serial_number")
                                        .build()
                                )
                                .visa(
                                    Transaction.TransactionEvent.NetworkInfo.Visa.builder()
                                        .originalTransactionId("original_transaction_id")
                                        .transactionId("transaction_id")
                                        .build()
                                )
                                .build()
                        )
                        .result(Transaction.TransactionEvent.DeclineResult.APPROVED)
                        .addRuleResult(
                            Transaction.TransactionEvent.RuleResult.builder()
                                .authRuleToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                                .explanation("explanation")
                                .name("name")
                                .result(
                                    Transaction.TransactionEvent.RuleResult.DetailedResult.APPROVED
                                )
                                .build()
                        )
                        .type(Transaction.TransactionEvent.Type.CLEARING)
                        .accountType(Transaction.TransactionEvent.AccountType.CHECKING)
                        .networkSpecificData(
                            Transaction.TransactionEvent.NetworkSpecificData.builder()
                                .mastercard(
                                    Transaction.TransactionEvent.NetworkSpecificData
                                        .MastercardNetworkSpecificData
                                        .builder()
                                        .ecommerceSecurityLevelIndicator("xxx")
                                        .addOnBehalfServiceResult(
                                            Transaction.TransactionEvent.NetworkSpecificData
                                                .MastercardNetworkSpecificData
                                                .OnBehalfServiceResult
                                                .builder()
                                                .result1("x")
                                                .result2("x")
                                                .service("xx")
                                                .build()
                                        )
                                        .transactionTypeIdentifier("xxx")
                                        .build()
                                )
                                .visa(
                                    Transaction.TransactionEvent.NetworkSpecificData
                                        .VisaNetworkSpecificData
                                        .builder()
                                        .businessApplicationIdentifier("xx")
                                        .build()
                                )
                                .build()
                        )
                        .build()
                )
                .family(
                    AccountActivityRetrieveTransactionResponse.CardTransaction
                        .TransactionFamilyTypes
                        .CARD
                )
                .build()

        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofCardTransaction(cardTransaction)

        assertThat(accountActivityRetrieveTransactionResponse.financialTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.bookTransferTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.cardTransaction())
            .contains(cardTransaction)
        assertThat(accountActivityRetrieveTransactionResponse.paymentTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.externalPayment()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.managementOperationTransaction())
            .isEmpty
    }

    @Test
    fun ofCardTransactionRoundtrip() {
        val jsonMapper = jsonMapper()
        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofCardTransaction(
                AccountActivityRetrieveTransactionResponse.CardTransaction.builder()
                    .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .accountToken("bd5e5649-1be8-4117-9bc5-3268258d1417")
                    .acquirerFee(0L)
                    .acquirerReferenceNumber("12345678987654321234567")
                    .amount(1000L)
                    .amounts(
                        Transaction.TransactionAmounts.builder()
                            .cardholder(
                                Transaction.TransactionAmounts.Cardholder.builder()
                                    .amount(-1000L)
                                    .conversionRate("1.000000")
                                    .currency("USD")
                                    .build()
                            )
                            .hold(
                                Transaction.TransactionAmounts.Hold.builder()
                                    .amount(0L)
                                    .currency("USD")
                                    .build()
                            )
                            .merchant(
                                Transaction.TransactionAmounts.Merchant.builder()
                                    .amount(-1000L)
                                    .currency("USD")
                                    .build()
                            )
                            .settlement(
                                Transaction.TransactionAmounts.Settlement.builder()
                                    .amount(-1000L)
                                    .currency("USD")
                                    .build()
                            )
                            .build()
                    )
                    .authorizationAmount(1000L)
                    .authorizationCode("123456")
                    .avs(Transaction.Avs.builder().address("address").zipcode("zipcode").build())
                    .cardToken("19c22c47-7a75-43ee-9891-595419830f7e")
                    .cardholderAuthentication(
                        Transaction.CardholderAuthentication.builder()
                            .threeDSVersion("2")
                            .acquirerExemption(
                                Transaction.CardholderAuthentication.AcquirerExemption.NONE
                            )
                            .authenticationResult(
                                Transaction.CardholderAuthentication.AuthenticationResult.SUCCESS
                            )
                            .decisionMadeBy(
                                Transaction.CardholderAuthentication.DecisionMadeBy.LITHIC_RULES
                            )
                            .liabilityShift(
                                Transaction.CardholderAuthentication.LiabilityShift
                                    ._3DS_AUTHENTICATED
                            )
                            .threeDSAuthenticationToken("a6e372d0-b40a-43eb-b0d1-4e1aebef5875")
                            .verificationAttempted(
                                Transaction.CardholderAuthentication.VerificationAttempted.NONE
                            )
                            .verificationResult(
                                Transaction.CardholderAuthentication.VerificationResult.FRICTIONLESS
                            )
                            .authenticationMethod(
                                Transaction.CardholderAuthentication.AuthenticationMethod
                                    .FRICTIONLESS
                            )
                            .build()
                    )
                    .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .merchant(
                        Transaction.Merchant.builder()
                            .acceptorId("333301802529120")
                            .acquiringInstitutionId("191231")
                            .city("NEW YORK")
                            .country("USA")
                            .descriptor("COFFEE SHOP")
                            .mcc("5812")
                            .state("NY")
                            .build()
                    )
                    .merchantAmount(1000L)
                    .merchantAuthorizationAmount(1000L)
                    .merchantCurrency("USD")
                    .network(Transaction.Network.MASTERCARD)
                    .networkRiskScore(0L)
                    .pos(
                        Transaction.Pos.builder()
                            .entryMode(
                                Transaction.Pos.PosEntryMode.builder()
                                    .card(Transaction.Pos.PosEntryMode.Card.NOT_PRESENT)
                                    .cardholder(
                                        Transaction.Pos.PosEntryMode.Cardholder.DEFERRED_BILLING
                                    )
                                    .pan(Transaction.Pos.PosEntryMode.Pan.AUTO_ENTRY)
                                    .pinEntered(true)
                                    .build()
                            )
                            .terminal(
                                Transaction.Pos.PosTerminal.builder()
                                    .attended(true)
                                    .cardRetentionCapable(true)
                                    .onPremise(true)
                                    .operator(Transaction.Pos.PosTerminal.Operator.ADMINISTRATIVE)
                                    .partialApprovalCapable(true)
                                    .pinCapability(
                                        Transaction.Pos.PosTerminal.PinCapability.CAPABLE
                                    )
                                    .type(Transaction.Pos.PosTerminal.Type.ADMINISTRATIVE)
                                    .acceptorTerminalId("acceptor_terminal_id")
                                    .build()
                            )
                            .build()
                    )
                    .result(Transaction.DeclineResult.APPROVED)
                    .settledAmount(1000L)
                    .status(Transaction.Status.PENDING)
                    .tokenInfo(
                        Transaction.TokenInfo.builder()
                            .walletType(Transaction.TokenInfo.WalletType.APPLE_PAY)
                            .build()
                    )
                    .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .addEvent(
                        Transaction.TransactionEvent.builder()
                            .token("0c2adae9-f535-4505-8c35-421dad9bd0b6")
                            .amount(1000L)
                            .amounts(
                                Transaction.TransactionEvent.TransactionEventAmounts.builder()
                                    .cardholder(
                                        Transaction.TransactionEvent.TransactionEventAmounts
                                            .Cardholder
                                            .builder()
                                            .amount(1000L)
                                            .conversionRate("1.000000")
                                            .currency("USD")
                                            .build()
                                    )
                                    .merchant(
                                        Transaction.TransactionEvent.TransactionEventAmounts
                                            .Merchant
                                            .builder()
                                            .amount(1000L)
                                            .currency("USD")
                                            .build()
                                    )
                                    .settlement(
                                        Transaction.TransactionEvent.TransactionEventAmounts
                                            .Settlement
                                            .builder()
                                            .amount(1000L)
                                            .conversionRate("1.000000")
                                            .currency("USD")
                                            .build()
                                    )
                                    .build()
                            )
                            .created(OffsetDateTime.parse("2023-09-26T21:14:28.637Z"))
                            .addDetailedResult(Transaction.TransactionEvent.DetailedResult.APPROVED)
                            .effectivePolarity(Transaction.TransactionEvent.EffectivePolarity.DEBIT)
                            .networkInfo(
                                Transaction.TransactionEvent.NetworkInfo.builder()
                                    .acquirer(
                                        Transaction.TransactionEvent.NetworkInfo.Acquirer.builder()
                                            .acquirerReferenceNumber("acquirer_reference_number")
                                            .retrievalReferenceNumber("retrieval_reference_number")
                                            .build()
                                    )
                                    .amex(
                                        Transaction.TransactionEvent.NetworkInfo.Amex.builder()
                                            .originalTransactionId("original_transaction_id")
                                            .transactionId("transaction_id")
                                            .build()
                                    )
                                    .mastercard(
                                        Transaction.TransactionEvent.NetworkInfo.Mastercard
                                            .builder()
                                            .banknetReferenceNumber("banknet_reference_number")
                                            .originalBanknetReferenceNumber(
                                                "original_banknet_reference_number"
                                            )
                                            .originalSwitchSerialNumber(
                                                "original_switch_serial_number"
                                            )
                                            .switchSerialNumber("switch_serial_number")
                                            .build()
                                    )
                                    .visa(
                                        Transaction.TransactionEvent.NetworkInfo.Visa.builder()
                                            .originalTransactionId("original_transaction_id")
                                            .transactionId("transaction_id")
                                            .build()
                                    )
                                    .build()
                            )
                            .result(Transaction.TransactionEvent.DeclineResult.APPROVED)
                            .addRuleResult(
                                Transaction.TransactionEvent.RuleResult.builder()
                                    .authRuleToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                                    .explanation("explanation")
                                    .name("name")
                                    .result(
                                        Transaction.TransactionEvent.RuleResult.DetailedResult
                                            .APPROVED
                                    )
                                    .build()
                            )
                            .type(Transaction.TransactionEvent.Type.CLEARING)
                            .accountType(Transaction.TransactionEvent.AccountType.CHECKING)
                            .networkSpecificData(
                                Transaction.TransactionEvent.NetworkSpecificData.builder()
                                    .mastercard(
                                        Transaction.TransactionEvent.NetworkSpecificData
                                            .MastercardNetworkSpecificData
                                            .builder()
                                            .ecommerceSecurityLevelIndicator("xxx")
                                            .addOnBehalfServiceResult(
                                                Transaction.TransactionEvent.NetworkSpecificData
                                                    .MastercardNetworkSpecificData
                                                    .OnBehalfServiceResult
                                                    .builder()
                                                    .result1("x")
                                                    .result2("x")
                                                    .service("xx")
                                                    .build()
                                            )
                                            .transactionTypeIdentifier("xxx")
                                            .build()
                                    )
                                    .visa(
                                        Transaction.TransactionEvent.NetworkSpecificData
                                            .VisaNetworkSpecificData
                                            .builder()
                                            .businessApplicationIdentifier("xx")
                                            .build()
                                    )
                                    .build()
                            )
                            .build()
                    )
                    .family(
                        AccountActivityRetrieveTransactionResponse.CardTransaction
                            .TransactionFamilyTypes
                            .CARD
                    )
                    .build()
            )

        val roundtrippedAccountActivityRetrieveTransactionResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(accountActivityRetrieveTransactionResponse),
                jacksonTypeRef<AccountActivityRetrieveTransactionResponse>(),
            )

        assertThat(roundtrippedAccountActivityRetrieveTransactionResponse)
            .isEqualTo(accountActivityRetrieveTransactionResponse)
    }

    @Test
    fun ofPaymentTransaction() {
        val paymentTransaction =
            AccountActivityRetrieveTransactionResponse.PaymentTransaction.builder()
                .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .category(
                    AccountActivityRetrieveTransactionResponse.PaymentTransaction
                        .TransactionCategory
                        .ACH
                )
                .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .descriptor("descriptor")
                .direction(
                    AccountActivityRetrieveTransactionResponse.PaymentTransaction.Direction.CREDIT
                )
                .addEvent(JsonValue.from(mapOf<String, Any>()))
                .family(
                    AccountActivityRetrieveTransactionResponse.PaymentTransaction
                        .TransactionFamilyTypes
                        .CARD
                )
                .financialAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .method(
                    AccountActivityRetrieveTransactionResponse.PaymentTransaction.Method
                        .ACH_NEXT_DAY
                )
                .methodAttributes(
                    AccountActivityRetrieveTransactionResponse.PaymentTransaction.MethodAttributes
                        .AchMethodAttributes
                        .builder()
                        .secCode(
                            AccountActivityRetrieveTransactionResponse.PaymentTransaction
                                .MethodAttributes
                                .AchMethodAttributes
                                .SecCode
                                .CCD
                        )
                        .addenda("addenda")
                        .companyId("company_id")
                        .receiptRoutingNumber("receipt_routing_number")
                        .retries(0L)
                        .returnReasonCode("return_reason_code")
                        .addTraceNumber("string")
                        .build()
                )
                .pendingAmount(200L)
                .relatedAccountTokens(
                    AccountActivityRetrieveTransactionResponse.PaymentTransaction
                        .RelatedAccountTokens
                        .builder()
                        .accountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .businessAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .build()
                )
                .result(
                    AccountActivityRetrieveTransactionResponse.PaymentTransaction.TransactionResult
                        .APPROVED
                )
                .settledAmount(500L)
                .source(AccountActivityRetrieveTransactionResponse.PaymentTransaction.Source.LITHIC)
                .status(
                    AccountActivityRetrieveTransactionResponse.PaymentTransaction.TransactionStatus
                        .PENDING
                )
                .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency("USD")
                .expectedReleaseDate(LocalDate.parse("2019-12-27"))
                .externalBankAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .userDefinedId("user_defined_id")
                .build()

        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofPaymentTransaction(paymentTransaction)

        assertThat(accountActivityRetrieveTransactionResponse.financialTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.bookTransferTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.cardTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.paymentTransaction())
            .contains(paymentTransaction)
        assertThat(accountActivityRetrieveTransactionResponse.externalPayment()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.managementOperationTransaction())
            .isEmpty
    }

    @Test
    fun ofPaymentTransactionRoundtrip() {
        val jsonMapper = jsonMapper()
        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofPaymentTransaction(
                AccountActivityRetrieveTransactionResponse.PaymentTransaction.builder()
                    .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .category(
                        AccountActivityRetrieveTransactionResponse.PaymentTransaction
                            .TransactionCategory
                            .ACH
                    )
                    .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .descriptor("descriptor")
                    .direction(
                        AccountActivityRetrieveTransactionResponse.PaymentTransaction.Direction
                            .CREDIT
                    )
                    .addEvent(JsonValue.from(mapOf<String, Any>()))
                    .family(
                        AccountActivityRetrieveTransactionResponse.PaymentTransaction
                            .TransactionFamilyTypes
                            .CARD
                    )
                    .financialAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .method(
                        AccountActivityRetrieveTransactionResponse.PaymentTransaction.Method
                            .ACH_NEXT_DAY
                    )
                    .methodAttributes(
                        AccountActivityRetrieveTransactionResponse.PaymentTransaction
                            .MethodAttributes
                            .AchMethodAttributes
                            .builder()
                            .secCode(
                                AccountActivityRetrieveTransactionResponse.PaymentTransaction
                                    .MethodAttributes
                                    .AchMethodAttributes
                                    .SecCode
                                    .CCD
                            )
                            .addenda("addenda")
                            .companyId("company_id")
                            .receiptRoutingNumber("receipt_routing_number")
                            .retries(0L)
                            .returnReasonCode("return_reason_code")
                            .addTraceNumber("string")
                            .build()
                    )
                    .pendingAmount(200L)
                    .relatedAccountTokens(
                        AccountActivityRetrieveTransactionResponse.PaymentTransaction
                            .RelatedAccountTokens
                            .builder()
                            .accountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                            .businessAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                            .build()
                    )
                    .result(
                        AccountActivityRetrieveTransactionResponse.PaymentTransaction
                            .TransactionResult
                            .APPROVED
                    )
                    .settledAmount(500L)
                    .source(
                        AccountActivityRetrieveTransactionResponse.PaymentTransaction.Source.LITHIC
                    )
                    .status(
                        AccountActivityRetrieveTransactionResponse.PaymentTransaction
                            .TransactionStatus
                            .PENDING
                    )
                    .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .currency("USD")
                    .expectedReleaseDate(LocalDate.parse("2019-12-27"))
                    .externalBankAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .userDefinedId("user_defined_id")
                    .build()
            )

        val roundtrippedAccountActivityRetrieveTransactionResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(accountActivityRetrieveTransactionResponse),
                jacksonTypeRef<AccountActivityRetrieveTransactionResponse>(),
            )

        assertThat(roundtrippedAccountActivityRetrieveTransactionResponse)
            .isEqualTo(accountActivityRetrieveTransactionResponse)
    }

    @Test
    fun ofExternalPayment() {
        val externalPayment =
            ExternalPayment.builder()
                .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .family(ExternalPayment.TransactionFamilyTypes.CARD)
                .status(ExternalPayment.TransactionStatus.PENDING)
                .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .category(ExternalPayment.ExternalPaymentCategory.EXTERNAL_WIRE)
                .currency("currency")
                .addEvent(
                    ExternalPayment.ExternalPaymentEvent.builder()
                        .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .amount(0L)
                        .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addDetailedResult(
                            ExternalPayment.ExternalPaymentEvent.DetailedResults.APPROVED
                        )
                        .effectiveDate(LocalDate.parse("2019-12-27"))
                        .memo("memo")
                        .result(ExternalPayment.ExternalPaymentEvent.TransactionResult.APPROVED)
                        .type(
                            ExternalPayment.ExternalPaymentEvent.ExternalPaymentEventType
                                .EXTERNAL_WIRE_INITIATED
                        )
                        .build()
                )
                .financialAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .paymentType(ExternalPayment.ExternalPaymentDirection.DEPOSIT)
                .pendingAmount(0L)
                .result(ExternalPayment.TransactionResult.APPROVED)
                .settledAmount(0L)
                .userDefinedId("user_defined_id")
                .build()

        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofExternalPayment(externalPayment)

        assertThat(accountActivityRetrieveTransactionResponse.financialTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.bookTransferTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.cardTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.paymentTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.externalPayment())
            .contains(externalPayment)
        assertThat(accountActivityRetrieveTransactionResponse.managementOperationTransaction())
            .isEmpty
    }

    @Test
    fun ofExternalPaymentRoundtrip() {
        val jsonMapper = jsonMapper()
        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofExternalPayment(
                ExternalPayment.builder()
                    .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .family(ExternalPayment.TransactionFamilyTypes.CARD)
                    .status(ExternalPayment.TransactionStatus.PENDING)
                    .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .category(ExternalPayment.ExternalPaymentCategory.EXTERNAL_WIRE)
                    .currency("currency")
                    .addEvent(
                        ExternalPayment.ExternalPaymentEvent.builder()
                            .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                            .amount(0L)
                            .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addDetailedResult(
                                ExternalPayment.ExternalPaymentEvent.DetailedResults.APPROVED
                            )
                            .effectiveDate(LocalDate.parse("2019-12-27"))
                            .memo("memo")
                            .result(ExternalPayment.ExternalPaymentEvent.TransactionResult.APPROVED)
                            .type(
                                ExternalPayment.ExternalPaymentEvent.ExternalPaymentEventType
                                    .EXTERNAL_WIRE_INITIATED
                            )
                            .build()
                    )
                    .financialAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .paymentType(ExternalPayment.ExternalPaymentDirection.DEPOSIT)
                    .pendingAmount(0L)
                    .result(ExternalPayment.TransactionResult.APPROVED)
                    .settledAmount(0L)
                    .userDefinedId("user_defined_id")
                    .build()
            )

        val roundtrippedAccountActivityRetrieveTransactionResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(accountActivityRetrieveTransactionResponse),
                jacksonTypeRef<AccountActivityRetrieveTransactionResponse>(),
            )

        assertThat(roundtrippedAccountActivityRetrieveTransactionResponse)
            .isEqualTo(accountActivityRetrieveTransactionResponse)
    }

    @Test
    fun ofManagementOperationTransaction() {
        val managementOperationTransaction =
            ManagementOperationTransaction.builder()
                .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .family(ManagementOperationTransaction.TransactionFamilyTypes.CARD)
                .status(ManagementOperationTransaction.TransactionStatus.PENDING)
                .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .category(ManagementOperationTransaction.ManagementOperationCategory.MANAGEMENT_FEE)
                .currency("currency")
                .direction(ManagementOperationTransaction.ManagementOperationDirection.CREDIT)
                .addEvent(
                    ManagementOperationTransaction.ManagementOperationEvent.builder()
                        .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .amount(0L)
                        .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .addDetailedResult(
                            ManagementOperationTransaction.ManagementOperationEvent.DetailedResults
                                .APPROVED
                        )
                        .effectiveDate(LocalDate.parse("2019-12-27"))
                        .memo("memo")
                        .result(
                            ManagementOperationTransaction.ManagementOperationEvent
                                .TransactionResult
                                .APPROVED
                        )
                        .type(
                            ManagementOperationTransaction.ManagementOperationEvent
                                .ManagementOperationEventType
                                .LOSS_WRITE_OFF
                        )
                        .subtype("subtype")
                        .build()
                )
                .externalResource(
                    ExternalResource.builder()
                        .externalResourceToken("external_resource_token")
                        .externalResourceType(ExternalResourceType.STATEMENT)
                        .externalResourceSubToken("external_resource_sub_token")
                        .build()
                )
                .financialAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .pendingAmount(0L)
                .result(ManagementOperationTransaction.TransactionResult.APPROVED)
                .settledAmount(0L)
                .transactionSeries(
                    ManagementOperationTransaction.TransactionSeries.builder()
                        .relatedTransactionEventToken("123e4567-e89b-12d3-a456-426614174000")
                        .relatedTransactionToken("123e4567-e89b-12d3-a456-426614174000")
                        .type("FEE")
                        .build()
                )
                .userDefinedId("user_defined_id")
                .build()

        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofManagementOperationTransaction(
                managementOperationTransaction
            )

        assertThat(accountActivityRetrieveTransactionResponse.financialTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.bookTransferTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.cardTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.paymentTransaction()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.externalPayment()).isEmpty
        assertThat(accountActivityRetrieveTransactionResponse.managementOperationTransaction())
            .contains(managementOperationTransaction)
    }

    @Test
    fun ofManagementOperationTransactionRoundtrip() {
        val jsonMapper = jsonMapper()
        val accountActivityRetrieveTransactionResponse =
            AccountActivityRetrieveTransactionResponse.ofManagementOperationTransaction(
                ManagementOperationTransaction.builder()
                    .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .family(ManagementOperationTransaction.TransactionFamilyTypes.CARD)
                    .status(ManagementOperationTransaction.TransactionStatus.PENDING)
                    .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .category(
                        ManagementOperationTransaction.ManagementOperationCategory.MANAGEMENT_FEE
                    )
                    .currency("currency")
                    .direction(ManagementOperationTransaction.ManagementOperationDirection.CREDIT)
                    .addEvent(
                        ManagementOperationTransaction.ManagementOperationEvent.builder()
                            .token("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                            .amount(0L)
                            .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .addDetailedResult(
                                ManagementOperationTransaction.ManagementOperationEvent
                                    .DetailedResults
                                    .APPROVED
                            )
                            .effectiveDate(LocalDate.parse("2019-12-27"))
                            .memo("memo")
                            .result(
                                ManagementOperationTransaction.ManagementOperationEvent
                                    .TransactionResult
                                    .APPROVED
                            )
                            .type(
                                ManagementOperationTransaction.ManagementOperationEvent
                                    .ManagementOperationEventType
                                    .LOSS_WRITE_OFF
                            )
                            .subtype("subtype")
                            .build()
                    )
                    .externalResource(
                        ExternalResource.builder()
                            .externalResourceToken("external_resource_token")
                            .externalResourceType(ExternalResourceType.STATEMENT)
                            .externalResourceSubToken("external_resource_sub_token")
                            .build()
                    )
                    .financialAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .pendingAmount(0L)
                    .result(ManagementOperationTransaction.TransactionResult.APPROVED)
                    .settledAmount(0L)
                    .transactionSeries(
                        ManagementOperationTransaction.TransactionSeries.builder()
                            .relatedTransactionEventToken("123e4567-e89b-12d3-a456-426614174000")
                            .relatedTransactionToken("123e4567-e89b-12d3-a456-426614174000")
                            .type("FEE")
                            .build()
                    )
                    .userDefinedId("user_defined_id")
                    .build()
            )

        val roundtrippedAccountActivityRetrieveTransactionResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(accountActivityRetrieveTransactionResponse),
                jacksonTypeRef<AccountActivityRetrieveTransactionResponse>(),
            )

        assertThat(roundtrippedAccountActivityRetrieveTransactionResponse)
            .isEqualTo(accountActivityRetrieveTransactionResponse)
    }

    enum class IncompatibleJsonShapeTestCase(val value: JsonValue) {
        BOOLEAN(JsonValue.from(false)),
        STRING(JsonValue.from("invalid")),
        INTEGER(JsonValue.from(-1)),
        FLOAT(JsonValue.from(3.14)),
        ARRAY(JsonValue.from(listOf("invalid", "array"))),
    }

    @ParameterizedTest
    @EnumSource
    fun incompatibleJsonShapeDeserializesToUnknown(testCase: IncompatibleJsonShapeTestCase) {
        val accountActivityRetrieveTransactionResponse =
            jsonMapper()
                .convertValue(
                    testCase.value,
                    jacksonTypeRef<AccountActivityRetrieveTransactionResponse>(),
                )

        val e =
            assertThrows<LithicInvalidDataException> {
                accountActivityRetrieveTransactionResponse.validate()
            }
        assertThat(e).hasMessageStartingWith("Unknown ")
    }
}
