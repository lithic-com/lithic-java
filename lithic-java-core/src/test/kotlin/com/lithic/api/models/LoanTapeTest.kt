// File generated from our OpenAPI spec by Stainless.

package com.lithic.api.models

import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class LoanTapeTest {

    @Test
    fun createLoanTape() {
        val loanTape =
            LoanTape.builder()
                .token("token")
                .accountStanding(
                    LoanTape.AccountStanding.builder()
                        .consecutiveFullPaymentsMade(123L)
                        .consecutiveMinimumPaymentsMade(123L)
                        .consecutiveMinimumPaymentsMissed(123L)
                        .daysPastDue(123L)
                        .hasGrace(true)
                        .periodNumber(123L)
                        .periodState(LoanTape.AccountStanding.PeriodState.STANDARD)
                        .build()
                )
                .availableCredit(123L)
                .balanceDue(
                    LoanTape.CategoryBalances.builder()
                        .fees(123L)
                        .interest(123L)
                        .principal(123L)
                        .build()
                )
                .balanceNextDue(
                    LoanTape.CategoryBalances.builder()
                        .fees(123L)
                        .interest(123L)
                        .principal(123L)
                        .build()
                )
                .balancePastDue(
                    LoanTape.CategoryBalances.builder()
                        .fees(123L)
                        .interest(123L)
                        .principal(123L)
                        .build()
                )
                .created(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .creditLimit(123L)
                .creditProductToken("credit_product_token")
                .date(LocalDate.parse("2019-12-27"))
                .dayTotals(
                    LoanTape.StatementTotals.builder()
                        .balanceTransfers(123L)
                        .cashAdvances(123L)
                        .credits(123L)
                        .fees(123L)
                        .interest(123L)
                        .payments(123L)
                        .purchases(123L)
                        .build()
                )
                .endingBalance(123L)
                .excessCredits(123L)
                .financialAccountToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .minimumPaymentBalance(
                    LoanTape.BalanceDetails.builder().amount(123L).remaining(123L).build()
                )
                .paymentAllocation(
                    LoanTape.CategoryBalances.builder()
                        .fees(123L)
                        .interest(123L)
                        .principal(123L)
                        .build()
                )
                .periodTotals(
                    LoanTape.StatementTotals.builder()
                        .balanceTransfers(123L)
                        .cashAdvances(123L)
                        .credits(123L)
                        .fees(123L)
                        .interest(123L)
                        .payments(123L)
                        .purchases(123L)
                        .build()
                )
                .previousStatementBalance(
                    LoanTape.BalanceDetails.builder().amount(123L).remaining(123L).build()
                )
                .updated(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .version(123L)
                .ytdTotals(
                    LoanTape.StatementTotals.builder()
                        .balanceTransfers(123L)
                        .cashAdvances(123L)
                        .credits(123L)
                        .fees(123L)
                        .interest(123L)
                        .payments(123L)
                        .purchases(123L)
                        .build()
                )
                .tier("tier")
                .build()
        assertThat(loanTape).isNotNull
        assertThat(loanTape.token()).isEqualTo("token")
        assertThat(loanTape.accountStanding())
            .isEqualTo(
                LoanTape.AccountStanding.builder()
                    .consecutiveFullPaymentsMade(123L)
                    .consecutiveMinimumPaymentsMade(123L)
                    .consecutiveMinimumPaymentsMissed(123L)
                    .daysPastDue(123L)
                    .hasGrace(true)
                    .periodNumber(123L)
                    .periodState(LoanTape.AccountStanding.PeriodState.STANDARD)
                    .build()
            )
        assertThat(loanTape.availableCredit()).isEqualTo(123L)
        assertThat(loanTape.balanceDue())
            .isEqualTo(
                LoanTape.CategoryBalances.builder()
                    .fees(123L)
                    .interest(123L)
                    .principal(123L)
                    .build()
            )
        assertThat(loanTape.balanceNextDue())
            .isEqualTo(
                LoanTape.CategoryBalances.builder()
                    .fees(123L)
                    .interest(123L)
                    .principal(123L)
                    .build()
            )
        assertThat(loanTape.balancePastDue())
            .isEqualTo(
                LoanTape.CategoryBalances.builder()
                    .fees(123L)
                    .interest(123L)
                    .principal(123L)
                    .build()
            )
        assertThat(loanTape.created()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(loanTape.creditLimit()).isEqualTo(123L)
        assertThat(loanTape.creditProductToken()).isEqualTo("credit_product_token")
        assertThat(loanTape.date()).isEqualTo(LocalDate.parse("2019-12-27"))
        assertThat(loanTape.dayTotals())
            .isEqualTo(
                LoanTape.StatementTotals.builder()
                    .balanceTransfers(123L)
                    .cashAdvances(123L)
                    .credits(123L)
                    .fees(123L)
                    .interest(123L)
                    .payments(123L)
                    .purchases(123L)
                    .build()
            )
        assertThat(loanTape.endingBalance()).isEqualTo(123L)
        assertThat(loanTape.excessCredits()).isEqualTo(123L)
        assertThat(loanTape.financialAccountToken())
            .isEqualTo("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(loanTape.minimumPaymentBalance())
            .isEqualTo(LoanTape.BalanceDetails.builder().amount(123L).remaining(123L).build())
        assertThat(loanTape.paymentAllocation())
            .isEqualTo(
                LoanTape.CategoryBalances.builder()
                    .fees(123L)
                    .interest(123L)
                    .principal(123L)
                    .build()
            )
        assertThat(loanTape.periodTotals())
            .isEqualTo(
                LoanTape.StatementTotals.builder()
                    .balanceTransfers(123L)
                    .cashAdvances(123L)
                    .credits(123L)
                    .fees(123L)
                    .interest(123L)
                    .payments(123L)
                    .purchases(123L)
                    .build()
            )
        assertThat(loanTape.previousStatementBalance())
            .isEqualTo(LoanTape.BalanceDetails.builder().amount(123L).remaining(123L).build())
        assertThat(loanTape.updated()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(loanTape.version()).isEqualTo(123L)
        assertThat(loanTape.ytdTotals())
            .isEqualTo(
                LoanTape.StatementTotals.builder()
                    .balanceTransfers(123L)
                    .cashAdvances(123L)
                    .credits(123L)
                    .fees(123L)
                    .interest(123L)
                    .payments(123L)
                    .purchases(123L)
                    .build()
            )
        assertThat(loanTape.tier()).contains("tier")
    }
}
