// File generated from our OpenAPI spec by Stainless.

package com.lithic.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.lithic.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class TransactionListPageResponseTest {

    @Test
    fun create() {
        val transactionListPageResponse =
            TransactionListPageResponse.builder()
                .addData(
                    Transaction.builder()
                        .token("c30c2182-1e69-4e0d-b40f-eec0d2a19123")
                        .accountToken("db3942f0-0627-4887-a190-1ea83b46d091")
                        .acquirerFee(0L)
                        .acquirerReferenceNumber(null)
                        .amount(1800L)
                        .amounts(
                            Transaction.TransactionAmounts.builder()
                                .cardholder(
                                    Transaction.TransactionAmounts.Cardholder.builder()
                                        .amount(0L)
                                        .conversionRate("1.000000")
                                        .currency("USD")
                                        .build()
                                )
                                .hold(
                                    Transaction.TransactionAmounts.Hold.builder()
                                        .amount(-1800L)
                                        .currency("USD")
                                        .build()
                                )
                                .merchant(
                                    Transaction.TransactionAmounts.Merchant.builder()
                                        .amount(0L)
                                        .currency("USD")
                                        .build()
                                )
                                .settlement(
                                    Transaction.TransactionAmounts.Settlement.builder()
                                        .amount(0L)
                                        .currency("USD")
                                        .build()
                                )
                                .build()
                        )
                        .authorizationAmount(1800L)
                        .authorizationCode("071471")
                        .avs(
                            Transaction.Avs.builder()
                                .address("123 Evergreen Terrace")
                                .zipcode("95006")
                                .build()
                        )
                        .cardToken("aac502f9-aecc-458a-954e-4bcf6edb6123")
                        .cardholderAuthentication(
                            Transaction.CardholderAuthentication.builder()
                                .threeDSVersion(null)
                                .acquirerExemption(
                                    Transaction.CardholderAuthentication.AcquirerExemption
                                        .MERCHANT_INITIATED_TRANSACTION
                                )
                                .authenticationResult(
                                    Transaction.CardholderAuthentication.AuthenticationResult
                                        .SUCCESS
                                )
                                .decisionMadeBy(
                                    Transaction.CardholderAuthentication.DecisionMadeBy.NETWORK
                                )
                                .liabilityShift(
                                    Transaction.CardholderAuthentication.LiabilityShift
                                        ._3DS_AUTHENTICATED
                                )
                                .threeDSAuthenticationToken("fc60d37d-95f7-419c-b628-dd9fbf9d80d0")
                                .verificationAttempted(
                                    Transaction.CardholderAuthentication.VerificationAttempted.OTHER
                                )
                                .verificationResult(
                                    Transaction.CardholderAuthentication.VerificationResult.SUCCESS
                                )
                                .authenticationMethod(
                                    Transaction.CardholderAuthentication.AuthenticationMethod
                                        .FRICTIONLESS
                                )
                                .build()
                        )
                        .created(OffsetDateTime.parse("2023-08-03T18:42:30Z"))
                        .merchant(
                            Transaction.Merchant.builder()
                                .acceptorId("452322000053360")
                                .acquiringInstitutionId("333301802529120")
                                .city("gosq.com")
                                .country("USA")
                                .descriptor("SQ *SOMA EATS")
                                .mcc("5812")
                                .state("CA")
                                .build()
                        )
                        .merchantAmount(1800L)
                        .merchantAuthorizationAmount(1800L)
                        .merchantCurrency("USD")
                        .network(Transaction.Network.MASTERCARD)
                        .networkRiskScore(5L)
                        .pos(
                            Transaction.Pos.builder()
                                .entryMode(
                                    Transaction.Pos.PosEntryMode.builder()
                                        .card(Transaction.Pos.PosEntryMode.Card.NOT_PRESENT)
                                        .cardholder(
                                            Transaction.Pos.PosEntryMode.Cardholder.NOT_PRESENT
                                        )
                                        .pan(Transaction.Pos.PosEntryMode.Pan.ECOMMERCE)
                                        .pinEntered(false)
                                        .build()
                                )
                                .terminal(
                                    Transaction.Pos.PosTerminal.builder()
                                        .attended(false)
                                        .cardRetentionCapable(false)
                                        .onPremise(false)
                                        .operator(Transaction.Pos.PosTerminal.Operator.UNKNOWN)
                                        .partialApprovalCapable(false)
                                        .pinCapability(
                                            Transaction.Pos.PosTerminal.PinCapability.NOT_CAPABLE
                                        )
                                        .type(Transaction.Pos.PosTerminal.Type.UNKNOWN)
                                        .acceptorTerminalId("acceptor_terminal_id")
                                        .build()
                                )
                                .build()
                        )
                        .result(Transaction.DeclineResult.APPROVED)
                        .settledAmount(0L)
                        .status(Transaction.Status.PENDING)
                        .tokenInfo(
                            Transaction.TokenInfo.builder()
                                .walletType(Transaction.TokenInfo.WalletType.APPLE_PAY)
                                .build()
                        )
                        .updated(OffsetDateTime.parse("2023-08-03T18:42:30Z"))
                        .addEvent(
                            Transaction.TransactionEvent.builder()
                                .token("bbbf1e86-322d-11ee-9779-00505685a123")
                                .amount(1800L)
                                .amounts(
                                    Transaction.TransactionEvent.TransactionEventAmounts.builder()
                                        .cardholder(
                                            Transaction.TransactionEvent.TransactionEventAmounts
                                                .Cardholder
                                                .builder()
                                                .amount(1800L)
                                                .conversionRate("1.000000")
                                                .currency("USD")
                                                .build()
                                        )
                                        .merchant(
                                            Transaction.TransactionEvent.TransactionEventAmounts
                                                .Merchant
                                                .builder()
                                                .amount(1800L)
                                                .currency("USD")
                                                .build()
                                        )
                                        .settlement(
                                            Transaction.TransactionEvent.TransactionEventAmounts
                                                .Settlement
                                                .builder()
                                                .amount(1000L)
                                                .conversionRate("1.000000")
                                                .currency("USD")
                                                .build()
                                        )
                                        .build()
                                )
                                .created(OffsetDateTime.parse("2023-08-03T18:42:30Z"))
                                .addDetailedResult(
                                    Transaction.TransactionEvent.DetailedResult.APPROVED
                                )
                                .effectivePolarity(
                                    Transaction.TransactionEvent.EffectivePolarity.DEBIT
                                )
                                .networkInfo(
                                    Transaction.TransactionEvent.NetworkInfo.builder()
                                        .acquirer(
                                            Transaction.TransactionEvent.NetworkInfo.Acquirer
                                                .builder()
                                                .acquirerReferenceNumber(null)
                                                .retrievalReferenceNumber("064386558597")
                                                .build()
                                        )
                                        .amex(
                                            Transaction.TransactionEvent.NetworkInfo.Amex.builder()
                                                .originalTransactionId("original_transaction_id")
                                                .transactionId("transaction_id")
                                                .build()
                                        )
                                        .mastercard(
                                            Transaction.TransactionEvent.NetworkInfo.Mastercard
                                                .builder()
                                                .banknetReferenceNumber("U1HSCJ")
                                                .originalBanknetReferenceNumber(
                                                    "original_banknet_reference_number"
                                                )
                                                .originalSwitchSerialNumber(
                                                    "original_switch_serial_number"
                                                )
                                                .switchSerialNumber(null)
                                                .build()
                                        )
                                        .visa(
                                            Transaction.TransactionEvent.NetworkInfo.Visa.builder()
                                                .originalTransactionId("original_transaction_id")
                                                .transactionId("transaction_id")
                                                .build()
                                        )
                                        .build()
                                )
                                .result(Transaction.TransactionEvent.DeclineResult.APPROVED)
                                .addRuleResult(
                                    Transaction.TransactionEvent.RuleResult.builder()
                                        .authRuleToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                                        .explanation("explanation")
                                        .name("name")
                                        .result(
                                            Transaction.TransactionEvent.RuleResult.DetailedResult
                                                .APPROVED
                                        )
                                        .build()
                                )
                                .type(Transaction.TransactionEvent.Type.AUTHORIZATION)
                                .networkSpecificData(
                                    Transaction.TransactionEvent.NetworkSpecificData.builder()
                                        .mastercard(
                                            Transaction.TransactionEvent.NetworkSpecificData
                                                .MastercardNetworkSpecificData
                                                .builder()
                                                .ecommerceSecurityLevelIndicator("xxx")
                                                .addOnBehalfServiceResult(
                                                    Transaction.TransactionEvent.NetworkSpecificData
                                                        .MastercardNetworkSpecificData
                                                        .OnBehalfServiceResult
                                                        .builder()
                                                        .result1("x")
                                                        .result2("x")
                                                        .service("xx")
                                                        .build()
                                                )
                                                .transactionTypeIdentifier("xxx")
                                                .build()
                                        )
                                        .visa(
                                            Transaction.TransactionEvent.NetworkSpecificData
                                                .VisaNetworkSpecificData
                                                .builder()
                                                .businessApplicationIdentifier("xx")
                                                .build()
                                        )
                                        .build()
                                )
                                .build()
                        )
                        .build()
                )
                .hasMore(false)
                .build()

        assertThat(transactionListPageResponse.data().getOrNull())
            .containsExactly(
                Transaction.builder()
                    .token("c30c2182-1e69-4e0d-b40f-eec0d2a19123")
                    .accountToken("db3942f0-0627-4887-a190-1ea83b46d091")
                    .acquirerFee(0L)
                    .acquirerReferenceNumber(null)
                    .amount(1800L)
                    .amounts(
                        Transaction.TransactionAmounts.builder()
                            .cardholder(
                                Transaction.TransactionAmounts.Cardholder.builder()
                                    .amount(0L)
                                    .conversionRate("1.000000")
                                    .currency("USD")
                                    .build()
                            )
                            .hold(
                                Transaction.TransactionAmounts.Hold.builder()
                                    .amount(-1800L)
                                    .currency("USD")
                                    .build()
                            )
                            .merchant(
                                Transaction.TransactionAmounts.Merchant.builder()
                                    .amount(0L)
                                    .currency("USD")
                                    .build()
                            )
                            .settlement(
                                Transaction.TransactionAmounts.Settlement.builder()
                                    .amount(0L)
                                    .currency("USD")
                                    .build()
                            )
                            .build()
                    )
                    .authorizationAmount(1800L)
                    .authorizationCode("071471")
                    .avs(
                        Transaction.Avs.builder()
                            .address("123 Evergreen Terrace")
                            .zipcode("95006")
                            .build()
                    )
                    .cardToken("aac502f9-aecc-458a-954e-4bcf6edb6123")
                    .cardholderAuthentication(
                        Transaction.CardholderAuthentication.builder()
                            .threeDSVersion(null)
                            .acquirerExemption(
                                Transaction.CardholderAuthentication.AcquirerExemption
                                    .MERCHANT_INITIATED_TRANSACTION
                            )
                            .authenticationResult(
                                Transaction.CardholderAuthentication.AuthenticationResult.SUCCESS
                            )
                            .decisionMadeBy(
                                Transaction.CardholderAuthentication.DecisionMadeBy.NETWORK
                            )
                            .liabilityShift(
                                Transaction.CardholderAuthentication.LiabilityShift
                                    ._3DS_AUTHENTICATED
                            )
                            .threeDSAuthenticationToken("fc60d37d-95f7-419c-b628-dd9fbf9d80d0")
                            .verificationAttempted(
                                Transaction.CardholderAuthentication.VerificationAttempted.OTHER
                            )
                            .verificationResult(
                                Transaction.CardholderAuthentication.VerificationResult.SUCCESS
                            )
                            .authenticationMethod(
                                Transaction.CardholderAuthentication.AuthenticationMethod
                                    .FRICTIONLESS
                            )
                            .build()
                    )
                    .created(OffsetDateTime.parse("2023-08-03T18:42:30Z"))
                    .merchant(
                        Transaction.Merchant.builder()
                            .acceptorId("452322000053360")
                            .acquiringInstitutionId("333301802529120")
                            .city("gosq.com")
                            .country("USA")
                            .descriptor("SQ *SOMA EATS")
                            .mcc("5812")
                            .state("CA")
                            .build()
                    )
                    .merchantAmount(1800L)
                    .merchantAuthorizationAmount(1800L)
                    .merchantCurrency("USD")
                    .network(Transaction.Network.MASTERCARD)
                    .networkRiskScore(5L)
                    .pos(
                        Transaction.Pos.builder()
                            .entryMode(
                                Transaction.Pos.PosEntryMode.builder()
                                    .card(Transaction.Pos.PosEntryMode.Card.NOT_PRESENT)
                                    .cardholder(Transaction.Pos.PosEntryMode.Cardholder.NOT_PRESENT)
                                    .pan(Transaction.Pos.PosEntryMode.Pan.ECOMMERCE)
                                    .pinEntered(false)
                                    .build()
                            )
                            .terminal(
                                Transaction.Pos.PosTerminal.builder()
                                    .attended(false)
                                    .cardRetentionCapable(false)
                                    .onPremise(false)
                                    .operator(Transaction.Pos.PosTerminal.Operator.UNKNOWN)
                                    .partialApprovalCapable(false)
                                    .pinCapability(
                                        Transaction.Pos.PosTerminal.PinCapability.NOT_CAPABLE
                                    )
                                    .type(Transaction.Pos.PosTerminal.Type.UNKNOWN)
                                    .acceptorTerminalId("acceptor_terminal_id")
                                    .build()
                            )
                            .build()
                    )
                    .result(Transaction.DeclineResult.APPROVED)
                    .settledAmount(0L)
                    .status(Transaction.Status.PENDING)
                    .tokenInfo(
                        Transaction.TokenInfo.builder()
                            .walletType(Transaction.TokenInfo.WalletType.APPLE_PAY)
                            .build()
                    )
                    .updated(OffsetDateTime.parse("2023-08-03T18:42:30Z"))
                    .addEvent(
                        Transaction.TransactionEvent.builder()
                            .token("bbbf1e86-322d-11ee-9779-00505685a123")
                            .amount(1800L)
                            .amounts(
                                Transaction.TransactionEvent.TransactionEventAmounts.builder()
                                    .cardholder(
                                        Transaction.TransactionEvent.TransactionEventAmounts
                                            .Cardholder
                                            .builder()
                                            .amount(1800L)
                                            .conversionRate("1.000000")
                                            .currency("USD")
                                            .build()
                                    )
                                    .merchant(
                                        Transaction.TransactionEvent.TransactionEventAmounts
                                            .Merchant
                                            .builder()
                                            .amount(1800L)
                                            .currency("USD")
                                            .build()
                                    )
                                    .settlement(
                                        Transaction.TransactionEvent.TransactionEventAmounts
                                            .Settlement
                                            .builder()
                                            .amount(1000L)
                                            .conversionRate("1.000000")
                                            .currency("USD")
                                            .build()
                                    )
                                    .build()
                            )
                            .created(OffsetDateTime.parse("2023-08-03T18:42:30Z"))
                            .addDetailedResult(Transaction.TransactionEvent.DetailedResult.APPROVED)
                            .effectivePolarity(Transaction.TransactionEvent.EffectivePolarity.DEBIT)
                            .networkInfo(
                                Transaction.TransactionEvent.NetworkInfo.builder()
                                    .acquirer(
                                        Transaction.TransactionEvent.NetworkInfo.Acquirer.builder()
                                            .acquirerReferenceNumber(null)
                                            .retrievalReferenceNumber("064386558597")
                                            .build()
                                    )
                                    .amex(
                                        Transaction.TransactionEvent.NetworkInfo.Amex.builder()
                                            .originalTransactionId("original_transaction_id")
                                            .transactionId("transaction_id")
                                            .build()
                                    )
                                    .mastercard(
                                        Transaction.TransactionEvent.NetworkInfo.Mastercard
                                            .builder()
                                            .banknetReferenceNumber("U1HSCJ")
                                            .originalBanknetReferenceNumber(
                                                "original_banknet_reference_number"
                                            )
                                            .originalSwitchSerialNumber(
                                                "original_switch_serial_number"
                                            )
                                            .switchSerialNumber(null)
                                            .build()
                                    )
                                    .visa(
                                        Transaction.TransactionEvent.NetworkInfo.Visa.builder()
                                            .originalTransactionId("original_transaction_id")
                                            .transactionId("transaction_id")
                                            .build()
                                    )
                                    .build()
                            )
                            .result(Transaction.TransactionEvent.DeclineResult.APPROVED)
                            .addRuleResult(
                                Transaction.TransactionEvent.RuleResult.builder()
                                    .authRuleToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                                    .explanation("explanation")
                                    .name("name")
                                    .result(
                                        Transaction.TransactionEvent.RuleResult.DetailedResult
                                            .APPROVED
                                    )
                                    .build()
                            )
                            .type(Transaction.TransactionEvent.Type.AUTHORIZATION)
                            .networkSpecificData(
                                Transaction.TransactionEvent.NetworkSpecificData.builder()
                                    .mastercard(
                                        Transaction.TransactionEvent.NetworkSpecificData
                                            .MastercardNetworkSpecificData
                                            .builder()
                                            .ecommerceSecurityLevelIndicator("xxx")
                                            .addOnBehalfServiceResult(
                                                Transaction.TransactionEvent.NetworkSpecificData
                                                    .MastercardNetworkSpecificData
                                                    .OnBehalfServiceResult
                                                    .builder()
                                                    .result1("x")
                                                    .result2("x")
                                                    .service("xx")
                                                    .build()
                                            )
                                            .transactionTypeIdentifier("xxx")
                                            .build()
                                    )
                                    .visa(
                                        Transaction.TransactionEvent.NetworkSpecificData
                                            .VisaNetworkSpecificData
                                            .builder()
                                            .businessApplicationIdentifier("xx")
                                            .build()
                                    )
                                    .build()
                            )
                            .build()
                    )
                    .build()
            )
        assertThat(transactionListPageResponse.hasMore()).contains(false)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val transactionListPageResponse =
            TransactionListPageResponse.builder()
                .addData(
                    Transaction.builder()
                        .token("c30c2182-1e69-4e0d-b40f-eec0d2a19123")
                        .accountToken("db3942f0-0627-4887-a190-1ea83b46d091")
                        .acquirerFee(0L)
                        .acquirerReferenceNumber(null)
                        .amount(1800L)
                        .amounts(
                            Transaction.TransactionAmounts.builder()
                                .cardholder(
                                    Transaction.TransactionAmounts.Cardholder.builder()
                                        .amount(0L)
                                        .conversionRate("1.000000")
                                        .currency("USD")
                                        .build()
                                )
                                .hold(
                                    Transaction.TransactionAmounts.Hold.builder()
                                        .amount(-1800L)
                                        .currency("USD")
                                        .build()
                                )
                                .merchant(
                                    Transaction.TransactionAmounts.Merchant.builder()
                                        .amount(0L)
                                        .currency("USD")
                                        .build()
                                )
                                .settlement(
                                    Transaction.TransactionAmounts.Settlement.builder()
                                        .amount(0L)
                                        .currency("USD")
                                        .build()
                                )
                                .build()
                        )
                        .authorizationAmount(1800L)
                        .authorizationCode("071471")
                        .avs(
                            Transaction.Avs.builder()
                                .address("123 Evergreen Terrace")
                                .zipcode("95006")
                                .build()
                        )
                        .cardToken("aac502f9-aecc-458a-954e-4bcf6edb6123")
                        .cardholderAuthentication(
                            Transaction.CardholderAuthentication.builder()
                                .threeDSVersion(null)
                                .acquirerExemption(
                                    Transaction.CardholderAuthentication.AcquirerExemption
                                        .MERCHANT_INITIATED_TRANSACTION
                                )
                                .authenticationResult(
                                    Transaction.CardholderAuthentication.AuthenticationResult
                                        .SUCCESS
                                )
                                .decisionMadeBy(
                                    Transaction.CardholderAuthentication.DecisionMadeBy.NETWORK
                                )
                                .liabilityShift(
                                    Transaction.CardholderAuthentication.LiabilityShift
                                        ._3DS_AUTHENTICATED
                                )
                                .threeDSAuthenticationToken("fc60d37d-95f7-419c-b628-dd9fbf9d80d0")
                                .verificationAttempted(
                                    Transaction.CardholderAuthentication.VerificationAttempted.OTHER
                                )
                                .verificationResult(
                                    Transaction.CardholderAuthentication.VerificationResult.SUCCESS
                                )
                                .authenticationMethod(
                                    Transaction.CardholderAuthentication.AuthenticationMethod
                                        .FRICTIONLESS
                                )
                                .build()
                        )
                        .created(OffsetDateTime.parse("2023-08-03T18:42:30Z"))
                        .merchant(
                            Transaction.Merchant.builder()
                                .acceptorId("452322000053360")
                                .acquiringInstitutionId("333301802529120")
                                .city("gosq.com")
                                .country("USA")
                                .descriptor("SQ *SOMA EATS")
                                .mcc("5812")
                                .state("CA")
                                .build()
                        )
                        .merchantAmount(1800L)
                        .merchantAuthorizationAmount(1800L)
                        .merchantCurrency("USD")
                        .network(Transaction.Network.MASTERCARD)
                        .networkRiskScore(5L)
                        .pos(
                            Transaction.Pos.builder()
                                .entryMode(
                                    Transaction.Pos.PosEntryMode.builder()
                                        .card(Transaction.Pos.PosEntryMode.Card.NOT_PRESENT)
                                        .cardholder(
                                            Transaction.Pos.PosEntryMode.Cardholder.NOT_PRESENT
                                        )
                                        .pan(Transaction.Pos.PosEntryMode.Pan.ECOMMERCE)
                                        .pinEntered(false)
                                        .build()
                                )
                                .terminal(
                                    Transaction.Pos.PosTerminal.builder()
                                        .attended(false)
                                        .cardRetentionCapable(false)
                                        .onPremise(false)
                                        .operator(Transaction.Pos.PosTerminal.Operator.UNKNOWN)
                                        .partialApprovalCapable(false)
                                        .pinCapability(
                                            Transaction.Pos.PosTerminal.PinCapability.NOT_CAPABLE
                                        )
                                        .type(Transaction.Pos.PosTerminal.Type.UNKNOWN)
                                        .acceptorTerminalId("acceptor_terminal_id")
                                        .build()
                                )
                                .build()
                        )
                        .result(Transaction.DeclineResult.APPROVED)
                        .settledAmount(0L)
                        .status(Transaction.Status.PENDING)
                        .tokenInfo(
                            Transaction.TokenInfo.builder()
                                .walletType(Transaction.TokenInfo.WalletType.APPLE_PAY)
                                .build()
                        )
                        .updated(OffsetDateTime.parse("2023-08-03T18:42:30Z"))
                        .addEvent(
                            Transaction.TransactionEvent.builder()
                                .token("bbbf1e86-322d-11ee-9779-00505685a123")
                                .amount(1800L)
                                .amounts(
                                    Transaction.TransactionEvent.TransactionEventAmounts.builder()
                                        .cardholder(
                                            Transaction.TransactionEvent.TransactionEventAmounts
                                                .Cardholder
                                                .builder()
                                                .amount(1800L)
                                                .conversionRate("1.000000")
                                                .currency("USD")
                                                .build()
                                        )
                                        .merchant(
                                            Transaction.TransactionEvent.TransactionEventAmounts
                                                .Merchant
                                                .builder()
                                                .amount(1800L)
                                                .currency("USD")
                                                .build()
                                        )
                                        .settlement(
                                            Transaction.TransactionEvent.TransactionEventAmounts
                                                .Settlement
                                                .builder()
                                                .amount(1000L)
                                                .conversionRate("1.000000")
                                                .currency("USD")
                                                .build()
                                        )
                                        .build()
                                )
                                .created(OffsetDateTime.parse("2023-08-03T18:42:30Z"))
                                .addDetailedResult(
                                    Transaction.TransactionEvent.DetailedResult.APPROVED
                                )
                                .effectivePolarity(
                                    Transaction.TransactionEvent.EffectivePolarity.DEBIT
                                )
                                .networkInfo(
                                    Transaction.TransactionEvent.NetworkInfo.builder()
                                        .acquirer(
                                            Transaction.TransactionEvent.NetworkInfo.Acquirer
                                                .builder()
                                                .acquirerReferenceNumber(null)
                                                .retrievalReferenceNumber("064386558597")
                                                .build()
                                        )
                                        .amex(
                                            Transaction.TransactionEvent.NetworkInfo.Amex.builder()
                                                .originalTransactionId("original_transaction_id")
                                                .transactionId("transaction_id")
                                                .build()
                                        )
                                        .mastercard(
                                            Transaction.TransactionEvent.NetworkInfo.Mastercard
                                                .builder()
                                                .banknetReferenceNumber("U1HSCJ")
                                                .originalBanknetReferenceNumber(
                                                    "original_banknet_reference_number"
                                                )
                                                .originalSwitchSerialNumber(
                                                    "original_switch_serial_number"
                                                )
                                                .switchSerialNumber(null)
                                                .build()
                                        )
                                        .visa(
                                            Transaction.TransactionEvent.NetworkInfo.Visa.builder()
                                                .originalTransactionId("original_transaction_id")
                                                .transactionId("transaction_id")
                                                .build()
                                        )
                                        .build()
                                )
                                .result(Transaction.TransactionEvent.DeclineResult.APPROVED)
                                .addRuleResult(
                                    Transaction.TransactionEvent.RuleResult.builder()
                                        .authRuleToken("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                                        .explanation("explanation")
                                        .name("name")
                                        .result(
                                            Transaction.TransactionEvent.RuleResult.DetailedResult
                                                .APPROVED
                                        )
                                        .build()
                                )
                                .type(Transaction.TransactionEvent.Type.AUTHORIZATION)
                                .networkSpecificData(
                                    Transaction.TransactionEvent.NetworkSpecificData.builder()
                                        .mastercard(
                                            Transaction.TransactionEvent.NetworkSpecificData
                                                .MastercardNetworkSpecificData
                                                .builder()
                                                .ecommerceSecurityLevelIndicator("xxx")
                                                .addOnBehalfServiceResult(
                                                    Transaction.TransactionEvent.NetworkSpecificData
                                                        .MastercardNetworkSpecificData
                                                        .OnBehalfServiceResult
                                                        .builder()
                                                        .result1("x")
                                                        .result2("x")
                                                        .service("xx")
                                                        .build()
                                                )
                                                .transactionTypeIdentifier("xxx")
                                                .build()
                                        )
                                        .visa(
                                            Transaction.TransactionEvent.NetworkSpecificData
                                                .VisaNetworkSpecificData
                                                .builder()
                                                .businessApplicationIdentifier("xx")
                                                .build()
                                        )
                                        .build()
                                )
                                .build()
                        )
                        .build()
                )
                .hasMore(false)
                .build()

        val roundtrippedTransactionListPageResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(transactionListPageResponse),
                jacksonTypeRef<TransactionListPageResponse>(),
            )

        assertThat(roundtrippedTransactionListPageResponse).isEqualTo(transactionListPageResponse)
    }
}
